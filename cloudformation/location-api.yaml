AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LocationProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LocationServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - geo:GetMapTile
                  - geo:SearchPlaceIndexForText
                  - geo:GetPlace
                Resource: '*'

  LocationProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: nursify-location-proxy
      Runtime: nodejs18.x
      Handler: location-proxy.handler
      Role: !GetAtt LocationProxyRole.Arn
      Code:
        ZipFile: |
          exports.handler = async () => ({ statusCode: 200, body: 'Placeholder' });

  LocationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: nursify-location-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  LocationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LocationApi
      ParentId: !GetAtt LocationApi.RootResourceId
      PathPart: location

  LocationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LocationApi
      ResourceId: !Ref LocationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationProxyFunction.Arn}/invocations

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LocationApi
      ResourceId: !Ref LocationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LocationMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref LocationApi
      StageName: prod

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LocationProxyFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${LocationApi}/stages/prod/POST/location

Outputs:
  ApiEndpoint:
    Value: !Sub https://${LocationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/location